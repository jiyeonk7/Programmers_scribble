#################################################문제#################################################

# 동빈이는 N x M 크기의 직사각형 형태의 미로에 갇혔습니다. 미로에는 여러 마리의 괴물이 있어 이를 피해 탈출해야 
# 합니다. 동빈이의 위치는 (1,1)이며 미로의 출구는 (N,M)의 위치에 존재하며 한 번에 한칸씩 이동할 수 있습니다.
# 이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있습니다. 미로는 반드시 탈출 할 수 있는 형태로 
# 제시됩니다. 이때, 동빈이가 탈출하기 위해 움직여야하는 최소 칸의 개수를 구하세요. 칸을 셀 때는 시작칸과 마지막 
# 칸을 모두 포함해서 계산합니다.

# 입력 조건: 첫째 줄에 두 정수 N,M (4<=N, M<=200) 이 주어집니다. 다음 N개의 줄에는 각각 M개의 정수(0 or 1)로
#           미로의 정보가 주어집니다. 각각의 수들은 공백없이 붙어서 입력으로 제시됩니다. 또한 시작 칸과
#           마지막 칸은 항상 1입니다.

#출력조건: 첫째 줄에 최소 이동칸의 개수를 출력합니다.

#################################################풀이#################################################
# - BFS는 시작 지점에서 가까운 노드부터 차례대로 그래프의 모든 노드를 탐색
# - 상하좌우로 연결된 모든 노드로의 거리가 1로 동일 -> (1,1) 지점부터 BFS를 수행하여 모든 노드의 최단 거리 값을
#   기록하면 해결할 수 있습니다.

#################################################코드#################################################
from collections import deque

def bfs(x,y):
    queue = deque()
    queue.append((x,y))

    while queue:                                                # queue가 빌 때까지 반복
        x,y = queue.popleft()

        for i in range(4):                                      # 현 위치에서 4가지 방향으로의 위치 확인
            nx = x + dx[i]
            ny = y + dy[i]

            if nx < 0 or nx >= n or ny <0 or ny >= m:           # 미로 공간 벗어난 경우 무시
                continue
            if graph[nx][ny] == 0:                              # 벽인 경우 무시
                continue
            if graph[nx][ny] == 1:                              # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
                graph[nx][ny] = graph[x][y] + 1
                queue.append((nx,ny))
    return graph[n-1][m-1]

n,m = 3, 3
graph = [[1,1,0],
         [0,1,0],
         [0,1,1]]

dx = [-1,1,0,0]
dy = [0,0,-1,1]

print(bfs(0,0))